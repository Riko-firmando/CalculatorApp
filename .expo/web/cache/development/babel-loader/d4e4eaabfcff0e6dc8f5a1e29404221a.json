{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NativeBaseProvider, Text, Box, extendTheme, Button, Pressable } from \"native-base\";\nimport InputButton from \"./src/components/inputButton\";\nvar buttons = [[\"CLEAR\", \"DEL\"], [\"7\", \"8\", \"9\", \"/\"], [\"4\", \"5\", \"6\", \"x\"], [\"1\", \"2\", \"3\", \"-\"], [\"0\", \".\", \"=\", \"+\"]];\nexport default function App() {\n  var _useState = useState(\"0\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      result = _useState2[0],\n      setResult = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nextValue = _useState4[0],\n      setNextValue = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      operator = _useState6[0],\n      setOperator = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      firstValue = _useState8[0],\n      setFirstValue = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      secondValue = _useState10[0],\n      setSecondValue = _useState10[1];\n\n  var theme = extendTheme({\n    primary: {\n      50: \"#E3F2F9\",\n      100: \"#C5E4F3\",\n      200: \"#A2D4EC\",\n      300: \"#7AC1E4\",\n      400: \"#47A9DA\",\n      500: \"#0088CC\",\n      600: \"#007AB8\",\n      700: \"#006BA1\",\n      800: \"#005885\",\n      900: \"#003F5E\"\n    },\n    amber: {\n      400: \"#d97706\"\n    }\n  });\n\n  var handleInput = function handleInput(input) {\n    switch (input) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n      case \"0\":\n        if (secondValue == \"\") {\n          setResult(result != \"0\" ? result + input : input);\n\n          if (!nextValue) {\n            setFirstValue(firstValue + input);\n          } else {\n            setSecondValue(secondValue + input);\n          }\n        } else {\n          setResult(input);\n          setFirstValue(input);\n          setOperator(operator);\n          setSecondValue(\"\");\n        }\n\n        break;\n\n      case \"+\":\n      case \"-\":\n      case \"x\":\n      case \"/\":\n        if (secondValue == \"\") {\n          setOperator(input == \"x\" ? \"*\" : input);\n          setResult(nextValue == false ? result + input : result.substr(0, result.length - 1) + input);\n        } else {\n          var _result = eval(firstValue + operator + secondValue);\n\n          setResult(_result % 1 === 0 ? _result : _result.toFixed(3));\n          setFirstValue(_result % 1 === 0 ? _result : _result.toFixed(3));\n          setOperator(input == \"x\" ? \"*\" : input);\n          setSecondValue(\"\");\n        }\n\n        setNextValue(true);\n        break;\n\n      case \"=\":\n        var result2 = eval(firstValue + operator + secondValue);\n        var result3 = result2.toString().split(\".\");\n        var thelength = result3[1].length;\n        setFirstValue(result2 % 1 === 0 ? result2 : thelength < 3 ? result2 : result2.toFixed(3));\n        setResult(!nextValue ? result : secondValue == \"\" ? firstValue : result2 % 1 === 0 ? result2 : result2.toFixed(3));\n        setNextValue(false);\n        break;\n\n      case \"CLEAR\":\n        setResult(\"0\");\n        setNextValue(false);\n        setOperator(\"\");\n        setFirstValue(\"\");\n        setSecondValue(\"\");\n    }\n  };\n\n  return React.createElement(NativeBaseProvider, {\n    theme: theme\n  }, React.createElement(Box, {\n    bg: \"primary.700\",\n    style: style.container\n  }, React.createElement(Box, {\n    style: style.resultContainer\n  }, React.createElement(Box, {\n    bg: \"primary.800\",\n    style: style.result\n  }, \"first : \" + firstValue, \"operator : \" + operator, \"second : \" + secondValue, React.createElement(Text, {\n    fontSize: 50,\n    color: \"#fff\"\n  }, result))), React.createElement(Box, {\n    style: style.inputContainer\n  }, buttons.map(function (buttonRows, idx) {\n    return React.createElement(Box, {\n      style: style.inputRow\n    }, buttonRows.map(function (buttonitem, idx) {\n      return React.createElement(Pressable, {\n        onPress: function onPress() {\n          return handleInput(buttonitem);\n        },\n        style: style.button\n      }, function (_ref) {\n        var isHovered = _ref.isHovered,\n            isFocused = _ref.isFocused,\n            isPressed = _ref.isPressed;\n        return React.createElement(Box, {\n          bg: isPressed ? \"primary.900\" : \"primary.400\",\n          p: 4,\n          rounded: 10,\n          style: {\n            transform: [{\n              scale: isPressed ? 0.93 : 1\n            }]\n          }\n        }, React.createElement(Text, {\n          color: \"#fff\"\n        }, buttonitem));\n      });\n    }), React.createElement(\"br\", null));\n  }))));\n}\nvar style = StyleSheet.create({\n  container: {\n    minHeight: \"100vh\",\n    padding: 6\n  },\n  resultContainer: {\n    flex: 4.5,\n    justifyContent: \"flex-end\",\n    alignItems: \"flex-end\",\n    marginBottom: 10,\n    flexDirection: \"row\"\n  },\n  result: {\n    flex: 1,\n    marginHorizontal: 5,\n    paddingHorizontal: 5,\n    textAlign: \"end\"\n  },\n  inputContainer: {\n    flex: 5.5\n  },\n  inputRow: {\n    flexDirection: \"row\"\n  },\n  button: {\n    flex: 1,\n    display: \"block\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    margin: 1.5,\n    marginBottom: 8\n  },\n  text: {\n    color: \"#fff\"\n  }\n});","map":{"version":3,"sources":["C:/Users/user/Documents/dumbways/project/calcApp/App.js"],"names":["React","useState","NativeBaseProvider","Text","Box","extendTheme","Button","Pressable","InputButton","buttons","App","result","setResult","nextValue","setNextValue","operator","setOperator","firstValue","setFirstValue","secondValue","setSecondValue","theme","primary","amber","handleInput","input","substr","length","result2","eval","toFixed","result3","toString","split","thelength","style","container","resultContainer","inputContainer","map","buttonRows","idx","inputRow","buttonitem","button","isHovered","isFocused","isPressed","transform","scale","StyleSheet","create","minHeight","padding","flex","justifyContent","alignItems","marginBottom","flexDirection","marginHorizontal","paddingHorizontal","textAlign","display","margin","text","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SACEC,kBADF,EAEEC,IAFF,EAGEC,GAHF,EAIEC,WAJF,EAKEC,MALF,EAMEC,SANF,QAOO,aAPP;AAQA,OAAOC,WAAP;AAEA,IAAMC,OAAO,GAAG,CACd,CAAC,OAAD,EAAU,KAAV,CADc,EAEd,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAFc,EAGd,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAHc,EAId,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAJc,EAKd,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CALc,CAAhB;AAQA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAA4BT,QAAQ,CAAC,GAAD,CAApC;AAAA;AAAA,MAAOU,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAkCX,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOY,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAgCb,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOc,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAoCf,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAOgB,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAsCjB,QAAQ,CAAC,EAAD,CAA9C;AAAA;AAAA,MAAOkB,WAAP;AAAA,MAAoBC,cAApB;;AAEA,MAAMC,KAAK,GAAGhB,WAAW,CAAC;AAExBiB,IAAAA,OAAO,EAAE;AACP,UAAI,SADG;AAEP,WAAK,SAFE;AAGP,WAAK,SAHE;AAIP,WAAK,SAJE;AAKP,WAAK,SALE;AAMP,WAAK,SANE;AAOP,WAAK,SAPE;AAQP,WAAK,SARE;AASP,WAAK,SATE;AAUP,WAAK;AAVE,KAFe;AAexBC,IAAAA,KAAK,EAAE;AACL,WAAK;AADA;AAfiB,GAAD,CAAzB;;AAoBA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,YAAQA,KAAR;AACE,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACE,YAAIN,WAAW,IAAI,EAAnB,EAAuB;AACrBP,UAAAA,SAAS,CAACD,MAAM,IAAI,GAAV,GAAgBA,MAAM,GAAGc,KAAzB,GAAiCA,KAAlC,CAAT;;AACA,cAAI,CAACZ,SAAL,EAAgB;AACdK,YAAAA,aAAa,CAACD,UAAU,GAAGQ,KAAd,CAAb;AACD,WAFD,MAEO;AACLL,YAAAA,cAAc,CAACD,WAAW,GAAGM,KAAf,CAAd;AACD;AACF,SAPD,MAOO;AACLb,UAAAA,SAAS,CAACa,KAAD,CAAT;AACAP,UAAAA,aAAa,CAACO,KAAD,CAAb;AACAT,UAAAA,WAAW,CAACD,QAAD,CAAX;AACAK,UAAAA,cAAc,CAAC,EAAD,CAAd;AACD;;AACD;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACE,YAAID,WAAW,IAAI,EAAnB,EAAuB;AACrBH,UAAAA,WAAW,CAACS,KAAK,IAAI,GAAT,GAAe,GAAf,GAAqBA,KAAtB,CAAX;AACAb,UAAAA,SAAS,CACPC,SAAS,IAAI,KAAb,GACIF,MAAM,GAAGc,KADb,GAEId,MAAM,CAACe,MAAP,CAAc,CAAd,EAAiBf,MAAM,CAACgB,MAAP,GAAgB,CAAjC,IAAsCF,KAHnC,CAAT;AAKD,SAPD,MAOO;AACL,cAAIG,OAAO,GAAGC,IAAI,CAACZ,UAAU,GAAGF,QAAb,GAAwBI,WAAzB,CAAlB;;AACAP,UAAAA,SAAS,CAACgB,OAAO,GAAG,CAAV,KAAgB,CAAhB,GAAoBA,OAApB,GAA8BA,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAA/B,CAAT;AACAZ,UAAAA,aAAa,CAACU,OAAO,GAAG,CAAV,KAAgB,CAAhB,GAAoBA,OAApB,GAA8BA,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAA/B,CAAb;AACAd,UAAAA,WAAW,CAACS,KAAK,IAAI,GAAT,GAAe,GAAf,GAAqBA,KAAtB,CAAX;AACAL,UAAAA,cAAc,CAAC,EAAD,CAAd;AACD;;AACDN,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACA;;AACF,WAAK,GAAL;AACE,YAAIc,OAAO,GAAGC,IAAI,CAACZ,UAAU,GAAGF,QAAb,GAAwBI,WAAzB,CAAlB;AACA,YAAIY,OAAO,GAAGH,OAAO,CAACI,QAAR,GAAmBC,KAAnB,CAAyB,GAAzB,CAAd;AAEA,YAAIC,SAAS,GAAGH,OAAO,CAAC,CAAD,CAAP,CAAWJ,MAA3B;AACAT,QAAAA,aAAa,CACXU,OAAO,GAAG,CAAV,KAAgB,CAAhB,GACIA,OADJ,GAEIM,SAAS,GAAG,CAAZ,GACAN,OADA,GAEAA,OAAO,CAACE,OAAR,CAAgB,CAAhB,CALO,CAAb;AAOAlB,QAAAA,SAAS,CACP,CAACC,SAAD,GACIF,MADJ,GAEIQ,WAAW,IAAI,EAAf,GACAF,UADA,GAEAW,OAAO,GAAG,CAAV,KAAgB,CAAhB,GACAA,OADA,GAEAA,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAPG,CAAT;AASAhB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA;;AACF,WAAK,OAAL;AACEF,QAAAA,SAAS,CAAC,GAAD,CAAT;AACAE,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,QAAAA,aAAa,CAAC,EAAD,CAAb;AACAE,QAAAA,cAAc,CAAC,EAAD,CAAd;AAzEJ;AA2ED,GA5ED;;AA8EA,SACE,oBAAC,kBAAD;AAAoB,IAAA,KAAK,EAAEC;AAA3B,KACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,aAAR;AAAsB,IAAA,KAAK,EAAEc,KAAK,CAACC;AAAnC,KACE,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAED,KAAK,CAACE;AAAlB,KACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,aAAR;AAAsB,IAAA,KAAK,EAAEF,KAAK,CAACxB;AAAnC,KACG,aAAaM,UADhB,EAEG,gBAAgBF,QAFnB,EAGG,cAAcI,WAHjB,EAIE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAE,EAAhB;AAAoB,IAAA,KAAK,EAAC;AAA1B,KACGR,MADH,CAJF,CADF,CADF,EAWE,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAEwB,KAAK,CAACG;AAAlB,KACG7B,OAAO,CAAC8B,GAAR,CAAY,UAACC,UAAD,EAAaC,GAAb;AAAA,WACX,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAEN,KAAK,CAACO;AAAlB,OACGF,UAAU,CAACD,GAAX,CAAe,UAACI,UAAD,EAAaF,GAAb;AAAA,aACd,oBAAC,SAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBAAMjB,WAAW,CAACmB,UAAD,CAAjB;AAAA,SADX;AAEE,QAAA,KAAK,EAAER,KAAK,CAACS;AAFf,SAIG,gBAAyC;AAAA,YAAtCC,SAAsC,QAAtCA,SAAsC;AAAA,YAA3BC,SAA2B,QAA3BA,SAA2B;AAAA,YAAhBC,SAAgB,QAAhBA,SAAgB;AACxC,eACE,oBAAC,GAAD;AACE,UAAA,EAAE,EAAEA,SAAS,GAAG,aAAH,GAAmB,aADlC;AAEE,UAAA,CAAC,EAAE,CAFL;AAGE,UAAA,OAAO,EAAE,EAHX;AAIE,UAAA,KAAK,EAAE;AACLC,YAAAA,SAAS,EAAE,CACT;AACEC,cAAAA,KAAK,EAAEF,SAAS,GAAG,IAAH,GAAU;AAD5B,aADS;AADN;AAJT,WAYE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAC;AAAZ,WAAoBJ,UAApB,CAZF,CADF;AAgBD,OArBH,CADc;AAAA,KAAf,CADH,EA0BE,+BA1BF,CADW;AAAA,GAAZ,CADH,CAXF,CADF,CADF;AAgDD;AAED,IAAMR,KAAK,GAAGe,UAAU,CAACC,MAAX,CAAkB;AAC9Bf,EAAAA,SAAS,EAAE;AACTgB,IAAAA,SAAS,EAAE,OADF;AAETC,IAAAA,OAAO,EAAE;AAFA,GADmB;AAK9BhB,EAAAA,eAAe,EAAE;AAEfiB,IAAAA,IAAI,EAAE,GAFS;AAGfC,IAAAA,cAAc,EAAE,UAHD;AAIfC,IAAAA,UAAU,EAAE,UAJG;AAKfC,IAAAA,YAAY,EAAE,EALC;AAMfC,IAAAA,aAAa,EAAE;AANA,GALa;AAa9B/C,EAAAA,MAAM,EAAE;AACN2C,IAAAA,IAAI,EAAE,CADA;AAENK,IAAAA,gBAAgB,EAAE,CAFZ;AAGNC,IAAAA,iBAAiB,EAAE,CAHb;AAINC,IAAAA,SAAS,EAAE;AAJL,GAbsB;AAmB9BvB,EAAAA,cAAc,EAAE;AAEdgB,IAAAA,IAAI,EAAE;AAFQ,GAnBc;AAuB9BZ,EAAAA,QAAQ,EAAE;AACRgB,IAAAA,aAAa,EAAE;AADP,GAvBoB;AA0B9Bd,EAAAA,MAAM,EAAE;AACNU,IAAAA,IAAI,EAAE,CADA;AAENQ,IAAAA,OAAO,EAAE,OAFH;AAGNN,IAAAA,UAAU,EAAE,QAHN;AAINK,IAAAA,SAAS,EAAE,QAJL;AAKNE,IAAAA,MAAM,EAAE,GALF;AAMNN,IAAAA,YAAY,EAAE;AANR,GA1BsB;AAkC9BO,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH;AAlCwB,CAAlB,CAAd","sourcesContent":["import React, { useState } from \"react\";\nimport { TouchableOpacity, StyleSheet } from \"react-native\";\nimport {\n  NativeBaseProvider,\n  Text,\n  Box,\n  extendTheme,\n  Button,\n  Pressable,\n} from \"native-base\";\nimport InputButton from \"./src/components/inputButton\";\n\nconst buttons = [\n  [\"CLEAR\", \"DEL\"],\n  [\"7\", \"8\", \"9\", \"/\"],\n  [\"4\", \"5\", \"6\", \"x\"],\n  [\"1\", \"2\", \"3\", \"-\"],\n  [\"0\", \".\", \"=\", \"+\"],\n];\n\nexport default function App() {\n  const [result, setResult] = useState(\"0\");\n  const [nextValue, setNextValue] = useState(false);\n  const [operator, setOperator] = useState(\"\");\n  const [firstValue, setFirstValue] = useState(\"\");\n  const [secondValue, setSecondValue] = useState(\"\");\n\n  const theme = extendTheme({\n    // Add new color\n    primary: {\n      50: \"#E3F2F9\",\n      100: \"#C5E4F3\",\n      200: \"#A2D4EC\",\n      300: \"#7AC1E4\",\n      400: \"#47A9DA\",\n      500: \"#0088CC\",\n      600: \"#007AB8\",\n      700: \"#006BA1\",\n      800: \"#005885\",\n      900: \"#003F5E\",\n    },\n    // Redefinig only one shade, rest of the color will remain same.\n    amber: {\n      400: \"#d97706\",\n    },\n  });\n\n  const handleInput = (input) => {\n    switch (input) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n      case \"0\":\n        if (secondValue == \"\") {\n          setResult(result != \"0\" ? result + input : input);\n          if (!nextValue) {\n            setFirstValue(firstValue + input);\n          } else {\n            setSecondValue(secondValue + input);\n          }\n        } else {\n          setResult(input);\n          setFirstValue(input);\n          setOperator(operator);\n          setSecondValue(\"\");\n        }\n        break;\n      case \"+\":\n      case \"-\":\n      case \"x\":\n      case \"/\":\n        if (secondValue == \"\") {\n          setOperator(input == \"x\" ? \"*\" : input);\n          setResult(\n            nextValue == false\n              ? result + input\n              : result.substr(0, result.length - 1) + input\n          );\n        } else {\n          let result2 = eval(firstValue + operator + secondValue);\n          setResult(result2 % 1 === 0 ? result2 : result2.toFixed(3));\n          setFirstValue(result2 % 1 === 0 ? result2 : result2.toFixed(3));\n          setOperator(input == \"x\" ? \"*\" : input);\n          setSecondValue(\"\");\n        }\n        setNextValue(true);\n        break;\n      case \"=\":\n        let result2 = eval(firstValue + operator + secondValue);\n        let result3 = result2.toString().split(\".\");\n        // console.log(result3);\n        let thelength = result3[1].length;\n        setFirstValue(\n          result2 % 1 === 0\n            ? result2\n            : thelength < 3\n            ? result2\n            : result2.toFixed(3)\n        );\n        setResult(\n          !nextValue\n            ? result\n            : secondValue == \"\"\n            ? firstValue\n            : result2 % 1 === 0\n            ? result2\n            : result2.toFixed(3)\n        );\n        setNextValue(false);\n        break;\n      case \"CLEAR\":\n        setResult(\"0\");\n        setNextValue(false);\n        setOperator(\"\");\n        setFirstValue(\"\");\n        setSecondValue(\"\");\n    }\n  };\n\n  return (\n    <NativeBaseProvider theme={theme}>\n      <Box bg=\"primary.700\" style={style.container}>\n        <Box style={style.resultContainer}>\n          <Box bg=\"primary.800\" style={style.result}>\n            {\"first : \" + firstValue}\n            {\"operator : \" + operator}\n            {\"second : \" + secondValue}\n            <Text fontSize={50} color=\"#fff\">\n              {result}\n            </Text>\n          </Box>\n        </Box>\n        <Box style={style.inputContainer}>\n          {buttons.map((buttonRows, idx) => (\n            <Box style={style.inputRow}>\n              {buttonRows.map((buttonitem, idx) => (\n                <Pressable\n                  onPress={() => handleInput(buttonitem)}\n                  style={style.button}\n                >\n                  {({ isHovered, isFocused, isPressed }) => {\n                    return (\n                      <Box\n                        bg={isPressed ? \"primary.900\" : \"primary.400\"}\n                        p={4}\n                        rounded={10}\n                        style={{\n                          transform: [\n                            {\n                              scale: isPressed ? 0.93 : 1,\n                            },\n                          ],\n                        }}\n                      >\n                        <Text color=\"#fff\">{buttonitem}</Text>\n                      </Box>\n                    );\n                  }}\n                </Pressable>\n              ))}\n              <br />\n            </Box>\n          ))}\n        </Box>\n      </Box>\n    </NativeBaseProvider>\n  );\n}\n\nconst style = StyleSheet.create({\n  container: {\n    minHeight: \"100vh\",\n    padding: 6,\n  },\n  resultContainer: {\n    // height: \"35vh\",\n    flex: 4.5,\n    justifyContent: \"flex-end\",\n    alignItems: \"flex-end\",\n    marginBottom: 10,\n    flexDirection: \"row\",\n  },\n  result: {\n    flex: 1,\n    marginHorizontal: 5,\n    paddingHorizontal: 5,\n    textAlign: \"end\",\n  },\n  inputContainer: {\n    // height: \"65vh\",\n    flex: 5.5,\n  },\n  inputRow: {\n    flexDirection: \"row\",\n  },\n  button: {\n    flex: 1,\n    display: \"block\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    margin: 1.5,\n    marginBottom: 8,\n  },\n  text: {\n    color: \"#fff\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}