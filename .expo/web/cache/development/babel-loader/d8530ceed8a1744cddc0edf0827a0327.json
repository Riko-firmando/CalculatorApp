{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NativeBaseProvider, Text, Box, extendTheme, Button, Pressable } from \"native-base\";\nimport { NavigationContainer, StackActions } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport InputButton from \"./src/components/inputButton\";\nvar buttons = [[\"CLEAR\", \"DEL\"], [\"7\", \"8\", \"9\", \"/\"], [\"4\", \"5\", \"6\", \"x\"], [\"1\", \"2\", \"3\", \"-\"], [\"0\", \".\", \"=\", \"+\"]];\n\nfunction Calculator() {\n  var _useState = useState(\"0\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      displayValue = _useState2[0],\n      setDisplayValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nextValue = _useState4[0],\n      setNextValue = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      operator = _useState6[0],\n      setOperator = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      firstValue = _useState8[0],\n      setFirstValue = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      secondValue = _useState10[0],\n      setSecondValue = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      value = _useState12[0],\n      setValue = _useState12[1];\n\n  var handleInput = function handleInput(input) {\n    switch (input) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n      case \"0\":\n        if (!value) {\n          if (secondValue == \"\" || \".\") {\n            setDisplayValue(displayValue != \"0\" ? displayValue + input : input);\n\n            if (!nextValue) {\n              setFirstValue(displayValue != \"0\" ? displayValue + input : input);\n            } else {\n              if (secondValue == \"0\") {\n                setSecondValue(input);\n                setDisplayValue(displayValue.substr(0, displayValue.length - 1) + input);\n              } else {\n                setSecondValue(secondValue == \".\" ? \"0\" + input : secondValue + input);\n              }\n            }\n          } else if (secondValue != \"\" && secondValue != \".\") {\n            setDisplayValue(input);\n            setFirstValue(input);\n            setOperator(operator);\n            setSecondValue(\"\");\n          }\n        } else {\n          if (secondValue == \"\") {\n            setDisplayValue(input);\n\n            if (!nextValue) {\n              setFirstValue(input);\n            } else {\n              setSecondValue(secondValue + input);\n            }\n          } else {\n            setDisplayValue(input);\n            setFirstValue(input);\n            setOperator(operator);\n            setSecondValue(\"\");\n          }\n\n          setValue(false);\n        }\n\n        break;\n\n      case \"+\":\n      case \"-\":\n      case \"x\":\n      case \"/\":\n        if (firstValue == \"\") {\n          setFirstValue(\"0\");\n        }\n\n        if (secondValue == \"\") {\n          setOperator(input == \"x\" ? \"*\" : input);\n          setDisplayValue(nextValue == false ? displayValue + input : displayValue.substr(0, displayValue.length - 1) + input);\n          setValue(false);\n        } else {\n          var _result = eval(firstValue + operator + secondValue);\n\n          setDisplayValue((_result % 1 === 0 ? _result : _result.toFixed(3)) + input);\n          setFirstValue(_result % 1 === 0 ? _result : _result.toFixed(3));\n          setOperator(input == \"x\" ? \"*\" : input);\n          setSecondValue(\"\");\n          setValue(true);\n        }\n\n        setNextValue(true);\n        break;\n\n      case \"=\":\n        if (firstValue != \"\" && operator != \"\" && secondValue == \"\") {\n          setDisplayValue(firstValue);\n          setNextValue(false);\n          setOperator(\"\");\n          break;\n        }\n\n        var result = eval(firstValue + operator + secondValue);\n\n        if (result % 1 != 0) {\n          var arrResult = result.toString().split(\".\");\n        }\n\n        setFirstValue(result % 1 === 0 ? result : arrResult[1].length < 3 ? result : result.toFixed(3));\n        setDisplayValue(!nextValue ? displayValue : secondValue == \"\" ? firstValue : result % 1 === 0 ? result : arrResult[1].length < 3 ? result : result.toFixed(3));\n        setSecondValue(\"\");\n        setOperator(\"\");\n        setValue(true);\n        setNextValue(false);\n        break;\n\n      case \"CLEAR\":\n        setDisplayValue(\"0\");\n        setNextValue(false);\n        setValue(false);\n        setOperator(\"\");\n        setFirstValue(\"\");\n        setSecondValue(\"\");\n        break;\n\n      case \".\":\n        if (firstValue.toString().indexOf(\".\") == -1 && nextValue == false) {\n          setDisplayValue(displayValue + input);\n\n          if (!nextValue) {\n            setFirstValue(firstValue == \"\" ? \"0\" + input : firstValue + input);\n          } else {\n            setSecondValue(secondValue == \"\" ? \"0\" + input : secondValue + input);\n          }\n        } else if (secondValue.toString().indexOf(\".\") == -1 && nextValue == true && operator != \"\") {\n          if (secondValue == \"\") {\n            setSecondValue(\"0\" + input);\n            setDisplayValue(displayValue + \"0\" + input);\n          } else {\n            setDisplayValue(displayValue + input);\n            setSecondValue(secondValue + input);\n          }\n        }\n\n        setValue(false);\n        break;\n\n      case \"DEL\":\n        setDisplayValue(displayValue.length == 1 ? \"0\" : displayValue.substr(0, displayValue.length - 1));\n\n        if (!nextValue) {\n          setFirstValue(firstValue.substr(0, firstValue.length - 1));\n        } else {\n          secondValue == \"\" ? setOperator(\"\") : setSecondValue(firstValue.substr(0, firstValue.length - 1));\n        }\n\n    }\n  };\n\n  return React.createElement(Box, {\n    bg: \"primary.700\",\n    style: style.container\n  }, React.createElement(Box, {\n    style: style.resultContainer\n  }, React.createElement(Box, {\n    bg: \"primary.800\",\n    style: style.result\n  }, \"nextValue : \" + nextValue, \"value : \" + value, \"first : \" + firstValue, \"operator : \" + operator, \"second : \" + secondValue, React.createElement(Text, {\n    fontSize: 50,\n    color: \"#fff\"\n  }, displayValue))), React.createElement(Box, {\n    style: style.inputContainer\n  }, buttons.map(function (buttonRows, idx) {\n    return React.createElement(Box, {\n      style: style.inputRow,\n      key: idx\n    }, buttonRows.map(function (buttonitem, idx) {\n      return React.createElement(Pressable, {\n        onPress: function onPress() {\n          return handleInput(buttonitem);\n        },\n        style: style.button,\n        key: idx\n      }, function (_ref) {\n        var isHovered = _ref.isHovered,\n            isFocused = _ref.isFocused,\n            isPressed = _ref.isPressed;\n        return React.createElement(Box, {\n          bg: isPressed ? \"primary.900\" : \"primary.400\",\n          p: 4,\n          rounded: 10,\n          style: {\n            transform: [{\n              scale: isPressed ? 0.93 : 1\n            }]\n          }\n        }, React.createElement(Text, {\n          color: \"#fff\"\n        }, buttonitem));\n      });\n    }), React.createElement(\"br\", null));\n  })));\n}\n\nfunction SplashScreen(_ref2) {\n  var navigation = _ref2.navigation;\n  useEffect(function () {\n    setTimeout(function () {\n      navigation.dispatch(StackActions.replace(\"Calculator\"));\n    }, 500);\n  }, []);\n  return React.createElement(View, null, React.createElement(Text, null, \"This is splashScreen\"));\n}\n\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var theme = extendTheme({\n    primary: {\n      50: \"#E3F2F9\",\n      100: \"#C5E4F3\",\n      200: \"#A2D4EC\",\n      300: \"#7AC1E4\",\n      400: \"#47A9DA\",\n      500: \"#0088CC\",\n      600: \"#007AB8\",\n      700: \"#006BA1\",\n      800: \"#005885\",\n      900: \"#003F5E\"\n    },\n    amber: {\n      400: \"#d97706\"\n    }\n  });\n  return React.createElement(NativeBaseProvider, {\n    theme: theme\n  }, React.createElement(NavigationContainer, null, React.createElement(Stack.Navigator, null, React.createElement(Stack.Screen, {\n    name: \"SplashCreen\",\n    component: SplashScreen,\n    options: {\n      headerShown: false\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Calculator\",\n    component: Calculator,\n    options: {\n      headerShown: false\n    }\n  }))));\n}\nvar style = StyleSheet.create({\n  container: {\n    minHeight: \"100vh\",\n    padding: 6\n  },\n  resultContainer: {\n    flex: 4.5,\n    justifyContent: \"flex-end\",\n    alignItems: \"flex-end\",\n    marginBottom: 10,\n    flexDirection: \"row\"\n  },\n  result: {\n    flex: 1,\n    marginHorizontal: 5,\n    paddingHorizontal: 5,\n    textAlign: \"end\"\n  },\n  inputContainer: {\n    flex: 5.5\n  },\n  inputRow: {\n    flexDirection: \"row\"\n  },\n  button: {\n    flex: 1,\n    display: \"block\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    margin: 1.5,\n    marginBottom: 8\n  },\n  text: {\n    color: \"#fff\"\n  }\n});","map":{"version":3,"sources":["C:/Users/user/Documents/dumbways/project/calcApp/App.js"],"names":["React","useState","useEffect","NativeBaseProvider","Text","Box","extendTheme","Button","Pressable","NavigationContainer","StackActions","createNativeStackNavigator","InputButton","buttons","Calculator","displayValue","setDisplayValue","nextValue","setNextValue","operator","setOperator","firstValue","setFirstValue","secondValue","setSecondValue","value","setValue","handleInput","input","substr","length","result","eval","toFixed","arrResult","toString","split","indexOf","style","container","resultContainer","inputContainer","map","buttonRows","idx","inputRow","buttonitem","button","isHovered","isFocused","isPressed","transform","scale","SplashScreen","navigation","setTimeout","dispatch","replace","Stack","App","theme","primary","amber","headerShown","StyleSheet","create","minHeight","padding","flex","justifyContent","alignItems","marginBottom","flexDirection","marginHorizontal","paddingHorizontal","textAlign","display","margin","text","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { TouchableOpacity, StyleSheet, View } from \"react-native\";\nimport {\n  NativeBaseProvider,\n  Text,\n  Box,\n  extendTheme,\n  Button,\n  Pressable,\n} from \"native-base\";\nimport { NavigationContainer, StackActions } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport InputButton from \"./src/components/inputButton\";\n\nconst buttons = [\n  [\"CLEAR\", \"DEL\"],\n  [\"7\", \"8\", \"9\", \"/\"],\n  [\"4\", \"5\", \"6\", \"x\"],\n  [\"1\", \"2\", \"3\", \"-\"],\n  [\"0\", \".\", \"=\", \"+\"],\n];\n\nfunction Calculator() {\n  // console.log(eval(\"8-2\"));\n  const [displayValue, setDisplayValue] = useState(\"0\");\n  const [nextValue, setNextValue] = useState(false);\n  const [operator, setOperator] = useState(\"\");\n  const [firstValue, setFirstValue] = useState(\"\");\n  const [secondValue, setSecondValue] = useState(\"\");\n  const [value, setValue] = useState(false);\n\n  const handleInput = (input) => {\n    switch (input) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n      case \"0\":\n        if (!value) {\n          if (secondValue == \"\" || \".\") {\n            setDisplayValue(displayValue != \"0\" ? displayValue + input : input);\n            if (!nextValue) {\n              setFirstValue(displayValue != \"0\" ? displayValue + input : input);\n            } else {\n              if (secondValue == \"0\") {\n                setSecondValue(input);\n                setDisplayValue(\n                  displayValue.substr(0, displayValue.length - 1) + input\n                );\n              } else {\n                setSecondValue(\n                  secondValue == \".\" ? \"0\" + input : secondValue + input\n                );\n              }\n            }\n          } else if (secondValue != \"\" && secondValue != \".\") {\n            setDisplayValue(input);\n            setFirstValue(input);\n            setOperator(operator);\n            setSecondValue(\"\");\n          }\n        } else {\n          if (secondValue == \"\") {\n            setDisplayValue(input);\n            if (!nextValue) {\n              setFirstValue(input);\n            } else {\n              setSecondValue(secondValue + input);\n            }\n          } else {\n            // if(secondValue ==  )\n            setDisplayValue(input);\n            setFirstValue(input);\n            setOperator(operator);\n            setSecondValue(\"\");\n          }\n          setValue(false);\n        }\n        break;\n      case \"+\":\n      case \"-\":\n      case \"x\":\n      case \"/\":\n        if (firstValue == \"\") {\n          setFirstValue(\"0\");\n        }\n        if (secondValue == \"\") {\n          setOperator(input == \"x\" ? \"*\" : input);\n          setDisplayValue(\n            nextValue == false\n              ? displayValue + input\n              : displayValue.substr(0, displayValue.length - 1) + input\n          );\n          setValue(false);\n        } else {\n          let result = eval(firstValue + operator + secondValue);\n          setDisplayValue(\n            (result % 1 === 0 ? result : result.toFixed(3)) + input\n          );\n          setFirstValue(result % 1 === 0 ? result : result.toFixed(3));\n          setOperator(input == \"x\" ? \"*\" : input);\n          setSecondValue(\"\");\n          setValue(true);\n        }\n        setNextValue(true);\n        break;\n      case \"=\":\n        if (firstValue != \"\" && operator != \"\" && secondValue == \"\") {\n          setDisplayValue(firstValue);\n          setNextValue(false);\n          setOperator(\"\");\n          break;\n        }\n        let result = eval(firstValue + operator + secondValue);\n        if (result % 1 != 0) {\n          var arrResult = result.toString().split(\".\");\n        }\n        setFirstValue(\n          result % 1 === 0\n            ? result\n            : arrResult[1].length < 3\n            ? result\n            : result.toFixed(3)\n        );\n        setDisplayValue(\n          !nextValue\n            ? displayValue\n            : secondValue == \"\"\n            ? firstValue\n            : result % 1 === 0\n            ? result\n            : arrResult[1].length < 3\n            ? result\n            : result.toFixed(3)\n        );\n        setSecondValue(\"\");\n        setOperator(\"\");\n        setValue(true);\n        setNextValue(false);\n        break;\n      case \"CLEAR\":\n        setDisplayValue(\"0\");\n        setNextValue(false);\n        setValue(false);\n        setOperator(\"\");\n        setFirstValue(\"\");\n        setSecondValue(\"\");\n        break;\n      case \".\":\n        if (firstValue.toString().indexOf(\".\") == -1 && nextValue == false) {\n          setDisplayValue(displayValue + input);\n          if (!nextValue) {\n            setFirstValue(firstValue == \"\" ? \"0\" + input : firstValue + input);\n          } else {\n            setSecondValue(\n              secondValue == \"\" ? \"0\" + input : secondValue + input\n            );\n          }\n        } else if (\n          secondValue.toString().indexOf(\".\") == -1 &&\n          nextValue == true &&\n          operator != \"\"\n        ) {\n          if (secondValue == \"\") {\n            setSecondValue(\"0\" + input);\n            setDisplayValue(displayValue + \"0\" + input);\n          } else {\n            setDisplayValue(displayValue + input);\n            setSecondValue(secondValue + input);\n          }\n        }\n        setValue(false);\n        break;\n      case \"DEL\":\n        setDisplayValue(\n          displayValue.length == 1\n            ? \"0\"\n            : displayValue.substr(0, displayValue.length - 1)\n        );\n        if (!nextValue) {\n          setFirstValue(firstValue.substr(0, firstValue.length - 1));\n        } else {\n          secondValue == \"\"\n            ? setOperator(\"\")\n            : setSecondValue(firstValue.substr(0, firstValue.length - 1));\n        }\n    }\n  };\n\n  return (\n    <Box bg=\"primary.700\" style={style.container}>\n      <Box style={style.resultContainer}>\n        <Box bg=\"primary.800\" style={style.result}>\n          {\"nextValue : \" + nextValue}\n          {\"value : \" + value}\n          {\"first : \" + firstValue}\n          {\"operator : \" + operator}\n          {\"second : \" + secondValue}\n          {/* {firstValue + operator + secondValue} */}\n          <Text fontSize={50} color=\"#fff\">\n            {displayValue}\n          </Text>\n        </Box>\n      </Box>\n      <Box style={style.inputContainer}>\n        {buttons.map((buttonRows, idx) => (\n          <Box style={style.inputRow} key={idx}>\n            {buttonRows.map((buttonitem, idx) => (\n              <Pressable\n                onPress={() => handleInput(buttonitem)}\n                style={style.button}\n                key={idx}\n              >\n                {({ isHovered, isFocused, isPressed }) => {\n                  return (\n                    <Box\n                      bg={isPressed ? \"primary.900\" : \"primary.400\"}\n                      p={4}\n                      rounded={10}\n                      style={{\n                        transform: [\n                          {\n                            scale: isPressed ? 0.93 : 1,\n                          },\n                        ],\n                      }}\n                    >\n                      <Text color=\"#fff\">{buttonitem}</Text>\n                    </Box>\n                  );\n                }}\n              </Pressable>\n            ))}\n            <br />\n          </Box>\n        ))}\n      </Box>\n    </Box>\n  );\n}\n\nfunction SplashScreen({ navigation }) {\n  useEffect(() => {\n    setTimeout(() => {\n      navigation.dispatch(StackActions.replace(\"Calculator\"));\n    }, 500);\n  }, []);\n\n  return (\n    <View>\n      <Text>This is splashScreen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\nexport default function App() {\n  const theme = extendTheme({\n    // Add new color\n    primary: {\n      50: \"#E3F2F9\",\n      100: \"#C5E4F3\",\n      200: \"#A2D4EC\",\n      300: \"#7AC1E4\",\n      400: \"#47A9DA\",\n      500: \"#0088CC\",\n      600: \"#007AB8\",\n      700: \"#006BA1\",\n      800: \"#005885\",\n      900: \"#003F5E\",\n    },\n    // Redefinig only one shade, rest of the color will remain same.\n    amber: {\n      400: \"#d97706\",\n    },\n  });\n  return (\n    <NativeBaseProvider theme={theme}>\n      <NavigationContainer>\n        <Stack.Navigator>\n          <Stack.Screen\n            name=\"SplashCreen\"\n            component={SplashScreen}\n            options={{\n              headerShown: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"Calculator\"\n            component={Calculator}\n            options={{\n              headerShown: false,\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </NativeBaseProvider>\n  );\n}\n\nconst style = StyleSheet.create({\n  container: {\n    minHeight: \"100vh\",\n    padding: 6,\n  },\n  resultContainer: {\n    // height: \"35vh\",\n    flex: 4.5,\n    justifyContent: \"flex-end\",\n    alignItems: \"flex-end\",\n    marginBottom: 10,\n    flexDirection: \"row\",\n  },\n  result: {\n    flex: 1,\n    marginHorizontal: 5,\n    paddingHorizontal: 5,\n    textAlign: \"end\",\n  },\n  inputContainer: {\n    // height: \"65vh\",\n    flex: 5.5,\n  },\n  inputRow: {\n    flexDirection: \"row\",\n  },\n  button: {\n    flex: 1,\n    display: \"block\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    margin: 1.5,\n    marginBottom: 8,\n  },\n  text: {\n    color: \"#fff\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}